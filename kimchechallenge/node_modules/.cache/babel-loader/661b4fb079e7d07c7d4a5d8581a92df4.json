{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matia\\\\OneDrive\\\\Escritorio\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport ApolloClient, { gql, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport { Home } from \"./Home\";\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  //uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  uri: \"https://countries.trevorblades.com\"\n}); //obtener países\n\nconst GET_COUNTRIES = gql`\n  query {\n    country (code: \"CL\"){\n      name\n      code\n      currency\n      capital\n      native\n      languages {\n        name\n        native\n        code\n      }\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\nconst [country, setCountry] = useState(\"\");\nconst {\n  data,\n  loading,\n  error\n} = useQuery(GET_COUNTRIES, {\n  client\n});\n\nif (loading || error) {\n  /*#__PURE__*/\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, error ? error.message : \"Loading...\");\n}\n\n; //componente que muestra los países\n\nconst App = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }\n}, \"return(\", /*#__PURE__*/React.createElement(\"select\", {\n  value: country,\n  onChange: event => setCountry(event.target.value),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }\n}, data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n  key: country.code,\n  value: country.code,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }\n}, country.name))), \");\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ApolloClient","gql","InMemoryCache","ApolloProvider","useQuery","Home","client","cache","uri","GET_COUNTRIES","country","setCountry","data","loading","error","message","App","event","target","value","countries","map","code","name"],"sources":["C:/Users/matia/OneDrive/Escritorio/dev-challenge-template-master/kimchechallenge/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport ApolloClient, { gql, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport { Home } from \"./Home\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  //uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  uri: \"https://countries.trevorblades.com\"\n});\n\n//obtener países\nconst GET_COUNTRIES = gql`\n  query {\n    country (code: \"CL\"){\n      name\n      code\n      currency\n      capital\n      native\n      languages {\n        name\n        native\n        code\n      }\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n\nconst [country, setCountry] = useState(\"\");\n    const {data, loading, error} = useQuery(GET_COUNTRIES, {client});\n\n    if(loading || error) {\n      <p>{error ? error.message : \"Loading...\"}</p>\n    };\n\n//componente que muestra los países\nconst App = () => (\n  <ApolloProvider client={client}>\n    {/* <Home/> */}\n    return(\n      <select value={country} onChange={event => setCountry(event.target.value)}>\n      {data.countries.map(country => (\n        <option key={country.code} value={country.code}>\n          {country.name}\n        </option>\n      ))}\n    </select>\n  );\n\n  </ApolloProvider>\n);\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,IAAuBC,GAAvB,EAA4BC,aAA5B,QAAiD,cAAjD;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;EAC9BO,KAAK,EAAE,IAAIL,aAAJ,EADuB;EAE9B;EACAM,GAAG,EAAE;AAHyB,CAAjB,CAAf,C,CAMA;;AACA,MAAMC,aAAa,GAAGR,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;AAqBA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACI,MAAM;EAACa,IAAD;EAAOC,OAAP;EAAgBC;AAAhB,IAAyBV,QAAQ,CAACK,aAAD,EAAgB;EAACH;AAAD,CAAhB,CAAvC;;AAEA,IAAGO,OAAO,IAAIC,KAAd,EAAqB;EACnB;EAAA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIA,KAAK,GAAGA,KAAK,CAACC,OAAT,GAAmB,YAA5B;AACD;;AAAA,C,CAEL;;AACA,MAAMC,GAAG,GAAG,mBACV,oBAAC,cAAD;EAAgB,MAAM,EAAEV,MAAxB;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,2BAGI;EAAQ,KAAK,EAAEI,OAAf;EAAwB,QAAQ,EAAEO,KAAK,IAAIN,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArD;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,GACCP,IAAI,CAACQ,SAAL,CAAeC,GAAf,CAAmBX,OAAO,iBACzB;EAAQ,GAAG,EAAEA,OAAO,CAACY,IAArB;EAA2B,KAAK,EAAEZ,OAAO,CAACY,IAA1C;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,GACGZ,OAAO,CAACa,IADX,CADD,CADD,CAHJ,OADF;;KAAMP,G;AAgBN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}