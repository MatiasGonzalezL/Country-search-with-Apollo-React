{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matia\\\\OneDrive\\\\Escritorio\\\\dev-challenge-template-master\\\\kimchechallenge\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport ApolloClient, { gql, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport { Home } from \"./Home\";\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  //uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  uri: \"https://countries.trevorblades.com\"\n}); //obtener países\n\nconst GET_COUNTRIES = gql`\n  query {\n    country (code: \"CL\"){\n      name\n      code\n      currency\n      capital\n      native\n      languages {\n        name\n        native\n        code\n      }\n      continent {\n        name\n        code\n      }\n    }\n  }\n`; //componente que muestra los países\n\nfunction App() {\n  /*#__PURE__*/\n  React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }\n  }, \"const [country, setCountry] = useState(\\\"\\\"); const data = useQuery(GET_COUNTRIES, \", client, \"); const loading = useQuery(GET_COUNTRIES, \", client, \"); const error = useQuery(GET_COUNTRIES, \", client, \"); if(loading || error) \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, error ? error.message : \"Loading...\"), \"; return(\", /*#__PURE__*/React.createElement(\"select\", {\n    value: country,\n    onChange: event => setCountry(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, data.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n    key: country.code,\n    value: country.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, country.name))), \");\");\n}\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ApolloClient","gql","InMemoryCache","ApolloProvider","useQuery","Home","client","cache","uri","GET_COUNTRIES","App","error","message","country","event","setCountry","target","value","data","countries","map","code","name"],"sources":["C:/Users/matia/OneDrive/Escritorio/dev-challenge-template-master/kimchechallenge/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport ApolloClient, { gql, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport { Home } from \"./Home\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  //uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  uri: \"https://countries.trevorblades.com\"\n});\n\n//obtener países\nconst GET_COUNTRIES = gql`\n  query {\n    country (code: \"CL\"){\n      name\n      code\n      currency\n      capital\n      native\n      languages {\n        name\n        native\n        code\n      }\n      continent {\n        name\n        code\n      }\n    }\n  }\n`;\n\n\n\n//componente que muestra los países\nfunction App() {\n  <ApolloProvider client={client}>\n    {/* <Home/> */}\n\n    const [country, setCountry] = useState(\"\");\n    const data = useQuery(GET_COUNTRIES, {client});\n    const loading = useQuery(GET_COUNTRIES, {client});\n    const error = useQuery(GET_COUNTRIES, {client});\n\n    if(loading || error) {\n      <p>{error ? error.message : \"Loading...\"}</p>\n    };\n\n    return(\n      <select value={country} onChange={event => setCountry(event.target.value)}>\n      {data.countries.map(country => (\n        <option key={country.code} value={country.code}>\n          {country.name}\n        </option>\n      ))}\n    </select>\n  );\n\n  </ApolloProvider>\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,IAAuBC,GAAvB,EAA4BC,aAA5B,QAAiD,cAAjD;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;EAC9BO,KAAK,EAAE,IAAIL,aAAJ,EADuB;EAE9B;EACAM,GAAG,EAAE;AAHyB,CAAjB,CAAf,C,CAMA;;AACA,MAAMC,aAAa,GAAGR,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA,C,CAuBA;;AACA,SAASS,GAAT,GAAe;EACb;EAAA,oBAAC,cAAD;IAAgB,MAAM,EAAEJ,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,0FAIwCA,MAJxC,iDAK2CA,MAL3C,+CAMyCA,MANzC,2CASI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIK,KAAK,GAAGA,KAAK,CAACC,OAAT,GAAmB,YAA5B,CATJ,4BAaI;IAAQ,KAAK,EAAEC,OAAf;IAAwB,QAAQ,EAAEC,KAAK,IAAIC,UAAU,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAArD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACCC,IAAI,CAACC,SAAL,CAAeC,GAAf,CAAmBP,OAAO,iBACzB;IAAQ,GAAG,EAAEA,OAAO,CAACQ,IAArB;IAA2B,KAAK,EAAER,OAAO,CAACQ,IAA1C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGR,OAAO,CAACS,IADX,CADD,CADD,CAbJ;AAuBD;;KAxBQZ,G;AAwBR;AAED,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}